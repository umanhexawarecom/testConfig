name: Azure Function Deploy for pipeline failure teams messages

on:   
  workflow_dispatch: # Allows manual trigger of the workflow   
    inputs:   
      environment:   
        description: 'Target environment (e.g., dev, staging, prod)'   
        required: true   
        default: 'dev'   

env:   
  AZURE_LOCATION: eastus   
  AZURE_RUNTIME: node   
  AZURE_RUNTIME_VERSION: 22   
  AZURE_FUNCTIONS_VERSION: 4   

jobs:   
  deploy:   
    runs-on: ubuntu-latest

    steps:        

      # Checkout repository   
      - name: Check Out Repository   
        id: checkout_repository   
        uses: actions/checkout@v3

      # Step 1: Set up Azure CLI
      - name: Set up Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 2: Deploy Azure Function App and HTTP Trigger   
      - name: Deploy Azure Function App   
        run: |   
          # Define environment-specific variables   
          environment="${{ github.event.inputs.environment }}"
          resourceGroup="lineagempg"
          resourceGroup1="lineagempg"
          functionAppName="testpostteamsgit1"
          functionName="testpostteamsgitcode"
          storageAccountName="testpostteamsstoresgit"
          appServicePlan="ASP-lineagempg-a4e0"

          # Check if the storage account exists 
          echo "Checking if storage account exists: $storageAccountName" 
          if ! az storage account show --name "$storageAccountName" --resource-group "$resourceGroup" --subscription "$subscriptionId" &>/dev/null; then 
            echo "Storage account does not exist. Creating storage account: $storageAccountName" 
            az storage account create --name "$storageAccountName" --location "$AZURE_LOCATION" --resource-group "$resourceGroup" --sku Standard_LRS --subscription "$subscriptionId"
          else 
            echo "Storage account already exists: $storageAccountName" 
          fi        

          # Check if the function app exists 
          echo "Checking if function app exists: $functionAppName" 
          if ! az functionapp show --name "$functionAppName" --resource-group "$resourceGroup" --subscription "$subscriptionId" &>/dev/null; then 
            echo "Function app does not exist. Creating function app: $functionAppName" 
            az functionapp create --resource-group "$resourceGroup" --consumption-plan-location "$AZURE_LOCATION" \
              --runtime "$AZURE_RUNTIME" --runtime-version "$AZURE_RUNTIME_VERSION" \
              --functions-version "$AZURE_FUNCTIONS_VERSION" --name "$functionAppName" \
              --storage-account "$storageAccountName" --subscription "$subscriptionId"
          else 
            echo "Function app already exists: $functionAppName" 
          fi 

      # Step 3: Zip the Azure Function folder   
      - name: Zip the Azure Function folder   
        run: |   
          mkdir -p funcDeployment 
          zip -r ./funcDeployment/postTeamsMsg.zip ./*

      # Step 4: Overwrite the Function App's Contents   
      - name: Build and Deploy to Azure   
        run: |   
          # Define environment-specific variables   
          resourceGroup="lineagempg"   
          functionAppName="testpostteamsgit1"   
          #subscriptionId="${{ secrets.AZURE_SUBSCRIPTION_ID }}" # Ensure subscription is explicitly passed

          # Ensure variables are not empty   
          if [ -z "$resourceGroup" ] [ -z "$functionAppName" ]; then  
            echo "Error: resourceGroup or functionAppName is not defined." 
            exit 1 
          fi 

          # Deploy the zipped function app (overwrite existing contents) 
          echo "Deploying Function App: $functionAppName in Resource Group: $resourceGroup" 
          az functionapp deployment source config-zip --resource-group "$resourceGroup" --name "$functionAppName" --src "./funcDeployment/postTeamsMsg.zip"  
